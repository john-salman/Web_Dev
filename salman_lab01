// Author: John Salman
// Assignment: Lab 01 CS386 Spring 2019
// Description: This program connects Computer Science Professors to
//              the courses they teach, or are associated with in
//              some capacity. It then prints this collection to the
//              console.

const fs = require('fs');

function findAllInstructors(courses) {
    // This function finds all instructors and stores their information in a
    // array of new objects. This object will contain an empty array for storing
    // associated courses.
    let instructors = {};
    for (let course in courses) {
        let course_components = courses[course]['components'];
        course_components.forEach(function (current) {
            let current_instr = courses[course][current]['instructors'][0];
            if (instructors[current_instr['instructor_id']] === undefined) {
                obj = {};
                obj.fName = current_instr['instructor_fName'];
                obj.lName = current_instr['instructor_lName'];
                obj.id = current_instr['instructor_id'];
                obj.classes = [];

                instructors[current_instr['instructor_id']] = obj;
            }
        });
    }
    return instructors;
}

function organizeCourses (instructors, courses) {
    // This function pulls the relevant information from the courses object
    // and arranges them in the desired format. In addition it logs related instructors
    // before returning a modified instructors array of objects.
    for (let course in courses) {
        var course_instr = [];
        var org_courses = [];

        let current_course = courses[course];
        let course_components = courses[course]['components'];

        course_components.forEach(function (current_comp) {
            let current = courses[course][current_comp];
            let current_class = current['class_number'];
            course_instr.push(current['instructors'][0]['instructor_id']);
            org_courses[current_class] = {
                Subject: current_course['subject'],
                Catalog: current_course['catalog'],
                Section: current_comp['section'],
                Component: current_comp,
                Title: current_course['course_title'],
                Instructor: current['instructors'][0]['instructor_lName'] + ", " + current['instructors'][0]['instructor_fName'],
                WTU: current['instructors'][0]['wtu'],
                Units: current_course['units'],
                Pattern: current['meeting_pattern'][0]['meeting_pattern'],
                Start: current['meeting_pattern'][0]['start_time'],
                End: current['meeting_pattern'][0]['end_time'],
                Room: current['meeting_pattern'][0]['facility_name'],
                Enrollment: current_course['total_enrolled'],
                FTES: current_course['ftes']
            };
        });
        course_instr.forEach(function(current_id) {
            org_courses.forEach(function (current_class, index) {
                instructors[current_id].classes.push(org_courses[index]);
            });
        });

    }
    return instructors;
}

const contents = fs.readFileSync('./courses_studentView_2193_ComputerScience.json', 'utf8');
let courses = JSON.parse(contents);

let cs_instructors = findAllInstructors(courses);
let instr_courses = organizeCourses(cs_instructors, courses);

// the following line is modified from: https://stackoverflow.com/questions/957537/how-can-i-display-a-javascript-object
let str = JSON.stringify(instr_courses, null, 4); // (Optional) beautiful indented output.
console.log(str);
fs.writeFile("instr_courses.json", str, function(err) {
    if(err) {
        return console.log(err);
    }

    console.log("The file was saved!");
});
//console.log(instr_courses);
